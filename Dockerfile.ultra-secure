# Ultra-Secure Multi-stage Dockerfile for Production
# This Dockerfile uses Google's Distroless images for maximum security

# Builder stage with minimal Alpine Linux
FROM cgr.dev/chainguard/rust:latest as builder

# Install only essential build dependencies
RUN apk add --no-cache \
    openssl-dev \
    openssl-libs-static \
    postgresql-dev \
    pkgconfig \
    git

# Add musl target for static linking
RUN rustup target add x86_64-unknown-linux-musl

# Set up build environment for static linking
ENV RUSTFLAGS="-C target-feature=+crt-static"
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true
ENV OPENSSL_DIR=/usr

# Create app directory
WORKDIR /app

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create dummy main.rs to build dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release --target x86_64-unknown-linux-musl && \
    rm -rf src

# Copy actual source code
COPY src ./src
COPY migrations ./migrations

# Build the actual application
RUN cargo build --release --target x86_64-unknown-linux-musl

# Verify the binary is statically linked
RUN ldd /app/target/x86_64-unknown-linux-musl/release/shopify-oauth-rust || echo "Statically linked binary"

# Runtime stage - Google's Distroless image (minimal, secure, no shell, no package manager)
FROM gcr.io/distroless/static-debian12:nonroot

# Copy the statically linked binary
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/shopify-oauth-rust /app/shopify-oauth-rust

# Copy migrations for database setup
COPY --from=builder /app/migrations /app/migrations

# Set working directory
WORKDIR /app

# Expose application port
EXPOSE 3000

# Set production environment variables
ENV RUST_LOG=info
ENV ENVIRONMENT=production

# Distroless runs as non-root user by default (UID 65532)
# No shell, no package manager, minimal attack surface

# Run the application
ENTRYPOINT ["./shopify-oauth-rust"]
